function getTopSendersForLast30Days() {
  // Define the regular expression to extract email addresses
  let regEx = /(?<=\<)(.*?)(?=\>)/gm;

  // Calculate the date 30 days ago from now
  let thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  console.log(`Fetching emails from the last 30 days, starting from:`, thirtyDaysAgo.toISOString());

  // Prepare the search query for Gmail
  let searchQuery = 'after:' + formatDateForGmail(thirtyDaysAgo);
  console.log('Gmail search query:', searchQuery);

  // Fetch threads based on the search query
  let threads = GmailApp.search(searchQuery);
  console.log(`Found ${threads.length} threads. Processing...`);

  // Object to hold sender email addresses and their corresponding counts
  let senderCounts = {};

  threads.forEach((thread) => {
    let messages = thread.getMessages();
    messages.forEach((message) => {
      let address = message.getFrom().match(regEx);
      if (address && address.length > 0) {
        let emailAddress = address[0];
        senderCounts[emailAddress] = (senderCounts[emailAddress] || 0) + 1;
      }
    });
  });

  console.log('Compilation of senders and counts completed.');

  // Convert the senderCounts object into an array and sort by count in descending order
  let sortedSenders = Object.entries(senderCounts).sort((a, b) => b[1] - a[1]);

  // Logging the top senders for review
  console.log('Top senders in the last 30 days:', sortedSenders.slice(0, 10));

  // Optionally, return the sorted array of senders and their counts if needed elsewhere
  return sortedSenders;
}

function formatDateForGmail(date) {
  // Format a date object into YYYY/MM/DD format for Gmail search
  return date.getFullYear() + '/' + (date.getMonth() + 1).toString().padStart(2, '0') + '/' + date.getDate().toString().padStart(2, '0');
}

// Direct function call to get and log top senders for the last 30 days
getTopSendersForLast30Days();
